paths:
  /api/users/:
    get:
      summary: Obtiene todos los usuarios disponibles en la aplicación.
      tags:
        - Users
      responses:
        "200":
          description: La operación fue exitosa, se retorna un arreglo de los usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: Error inesperado en el servidor, no se pudo manejar el proceso.
  

  /api/users/{uid}:
    get:
      summary: Obtener un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a obtener
          schema:
            type: string
      responses:
        "200":
          description: Operación exitosa. Se retorna el usuario solicitado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Parametros invalidos
        "404":
          description: Usuario no encontrado.
        "500":
          description: Error inesperado en el servidor.

    put:
      summary: Actualizar usuario por su ID
      tags:
      - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a actualizar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUser'
      responses:
        "200":
          description: Usuario actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: user updated
        "400":
          description: Parametros invalidos
        "404":
          description: Usuario no encontrado.
        "500":
          description: Error inesperado en el servidor.

    delete:
      summary: Eliminar un usuario por id
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario a eliminar.
          schema:
            type: string
      responses:
        "200":
          description: Usuario eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted
        "400": 
          description: Parametros invalidos
        "404":
          description: Usuario no encontrado
        "500":
          description: Error inesperado en el servidor


components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado de MongoDB.
          example: "647fa8c9e46dbc5a20320181"
        first_name:
          type: string
          description: Nombre del usuario.
          example: Usuario de prueba 1
        last_name:
          type: string
          description: Apellido del usuario.
          example: Apellido de prueba 1
        email:
          type: string
          description: Email del usuario.
          example: correodeprueba1@gmail.com
        password:
          type: string
          description: Contraseña del usuario (encriptada).
          example: $2b$10$sjo8EM4WkYt2BXI/K5t12oScO6TfAgjMFxLJvAnWO6xn4tmd7T2
        role:
          type: string
          description: Rol del usuario.
          example: admin
        pets:
          type: array
          description: Arreglo de mascotas del usuario.
          items:
            type: string

    newUser:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo del usuario, este campo es único
        password:
          type: string
          description: Contraseña del usuario (posteriormente hasheada).
      example:
        first_name: Pedro
        last_name: Picapiedra
        email: pepepical@correo.com
        password: "12345"

